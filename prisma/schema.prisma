// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // .env.development.local や .env.local は Next.js やフロント用の環境変数 としては有効ですが、Prisma CLI はそれを自動では読まないので、
  // PRISMA_DATABASE_URLは .env ファイルに記述すること。
}

// datasource db = 「Prisma が使うデータベースの設定をまとめたもの」
// datasource db {
//   provider = "postgresql"          // データベースの種類。ここでは PostgreSQL
//   url      = env("PRISMA_DATABASE_URL") // 接続先URL（環境変数で管理）
// }

// ------------------------------------------------------------------------------------
// ✅
// Account / Session / User / VerificationToken
// → 認証・ログイン・セッション管理に関わるモデル。
// → ユーザー情報やログイン状態の管理が目的。
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  accounts       Account[]
  purchases      Purchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ------------------------------------------------------------------------------------
// ユーザーの購入履歴に関わるモデル。
model Purchase {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String?
  userName  String?
  productId String?
}
